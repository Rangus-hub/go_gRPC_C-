// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/info.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PplManagementClient is the client API for PplManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PplManagementClient interface {
	CreatePerson(ctx context.Context, in *PersonInfo, opts ...grpc.CallOption) (*Employee, error)
}

type pplManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewPplManagementClient(cc grpc.ClientConnInterface) PplManagementClient {
	return &pplManagementClient{cc}
}

func (c *pplManagementClient) CreatePerson(ctx context.Context, in *PersonInfo, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/info.PplManagement/CreatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PplManagementServer is the server API for PplManagement service.
// All implementations must embed UnimplementedPplManagementServer
// for forward compatibility
type PplManagementServer interface {
	CreatePerson(context.Context, *PersonInfo) (*Employee, error)
	mustEmbedUnimplementedPplManagementServer()
}

// UnimplementedPplManagementServer must be embedded to have forward compatible implementations.
type UnimplementedPplManagementServer struct {
}

func (UnimplementedPplManagementServer) CreatePerson(context.Context, *PersonInfo) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedPplManagementServer) mustEmbedUnimplementedPplManagementServer() {}

// UnsafePplManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PplManagementServer will
// result in compilation errors.
type UnsafePplManagementServer interface {
	mustEmbedUnimplementedPplManagementServer()
}

func RegisterPplManagementServer(s grpc.ServiceRegistrar, srv PplManagementServer) {
	s.RegisterService(&PplManagement_ServiceDesc, srv)
}

func _PplManagement_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PplManagementServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.PplManagement/CreatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PplManagementServer).CreatePerson(ctx, req.(*PersonInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// PplManagement_ServiceDesc is the grpc.ServiceDesc for PplManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PplManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "info.PplManagement",
	HandlerType: (*PplManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _PplManagement_CreatePerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/info.proto",
}
